diff --git a/modules/python/src2/hdr_parser.py b/modules/python/src2/hdr_parser.py
index 27f0fe0963..bfae01a806 100755
--- a/modules/python/src2/hdr_parser.py
+++ b/modules/python/src2/hdr_parser.py
@@ -70,6 +70,29 @@ class CppHeaderParser(object):
 
         return arg_str[npos2+1:npos3].strip(), npos3
 
+    def get_var_list(self, stmt):
+        balance = 0
+        npos = -1
+        while 1:
+            t, npos = self.find_next_token(stmt, ['<', '>', ',', ' '], npos + 1)
+            if npos < 0:
+                print("Error: no matching '>' in the var_list call at %s:%d" % (self.hname, self.lineno))
+                sys.exit(-1)
+            if t == '<':
+                balance += 1
+            elif t == '>':
+                balance -= 1
+            elif balance == 0:
+                break
+
+        var_list = [stmt[:npos]]
+        if t == ',':
+            return [stmt[:npos]] + stmt[npos + 1:].split(",")
+
+        var_list = stmt[npos:].split(",")
+        var_list[0] = stmt[:npos] + var_list[0]
+        return var_list
+
     def parse_arg(self, arg_str, argno):
         """
         Parses <arg_type> [arg_name]
@@ -170,25 +193,47 @@ class CppHeaderParser(object):
                     arg_type += w
                 continue
             elif w == "<":
-                arg_type += "_"
+                arg_type += w
                 angle_stack.append(0)
             elif w == "," or w == '>':
+                arg_type += w
                 if not angle_stack:
                     print("Error at %s:%d: argument contains ',' or '>' not within template arguments" % (self.hname, self.lineno))
                     sys.exit(-1)
-                if w == ",":
-                    arg_type += "_and_"
-                elif w == ">":
+                if w == ">":
                     if angle_stack[0] == 0:
                         print("Error at %s:%d: template has no arguments" % (self.hname, self.lineno))
                         sys.exit(-1)
-                    if angle_stack[0] > 1:
-                        arg_type += "_end_"
                     angle_stack[-1:] = []
             elif angle_stack:
+                if angle_stack[-1] != 0:
+                    arg_type += " "
                 arg_type += w
                 angle_stack[-1] += 1
-            elif arg_type == "struct":
+            elif arg_type == "struct" or (wi + 1 < len(word_list) and (arg_type + " " + w) in [
+                # https://en.cppreference.com/w/cpp/language/types
+                "signed char",
+                "unsigned char",
+                "short int",
+                "signed short",
+                "signed short int",
+                "unsigned short",
+                "unsigned short int",
+                "signed int",
+                "unsigned int",
+                "long int",
+                "signed long",
+                "signed long int",
+                "unsigned long",
+                "unsigned long int",
+                "long long",
+                "long long int",
+                "signed long long",
+                "signed long long int",
+                "unsigned long long",
+                "unsigned long long int",
+                "long double"
+            ]):
                 arg_type += " " + w
             elif arg_type and arg_type != "~":
                 arg_name = " ".join(word_list[wi:])
@@ -227,8 +272,6 @@ class CppHeaderParser(object):
         if add_star:
             arg_type += "*"
 
-        arg_type = self.batch_replace(arg_type, [("std::", ""), ("cv::", ""), ("::", "_")])
-
         return arg_type, arg_name, modlist, argno
 
     def parse_enum(self, decl_str):
@@ -424,11 +467,25 @@ class CppHeaderParser(object):
         npos = decl_str.find("CV_EXPORTS_AS")
         if npos >= 0:
             arg, npos3 = self.get_macro_arg(decl_str, npos)
+            if arg.startswith("get ") or arg.startswith("put ") or arg.startswith("get_default ") or arg.startswith("put_default "):
+                accessor = arg[:3]
+                func_modlist.append("/attr=prop" + accessor)
+                if arg.startswith("get_default ") or arg.startswith("put_default ") : func_modlist.append("/id=DISPID_VALUE")
+                arg = arg[len("get "):] if arg.startswith("get ") or arg.startswith("put ") else arg[len("get_default "):]
+                func_modlist.append("/idlname=" + arg)
+                arg = accessor + "_" + arg
             func_modlist.append("="+arg)
             decl_str = decl_str[:npos] + decl_str[npos3+1:]
         npos = decl_str.find("CV_WRAP_AS")
         if npos >= 0:
             arg, npos3 = self.get_macro_arg(decl_str, npos)
+            if arg.startswith("get ") or arg.startswith("put ") or arg.startswith("get_default ") or arg.startswith("put_default "):
+                accessor = arg[:3]
+                func_modlist.append("/attr=prop" + accessor)
+                if arg.startswith("get_default ") or arg.startswith("put_default ") : func_modlist.append("/id=DISPID_VALUE")
+                arg = arg[len("get "):] if arg.startswith("get ") or arg.startswith("put ") else arg[len("get_default "):]
+                func_modlist.append("/idlname=" + arg)
+                arg = accessor + "_" + arg
             func_modlist.append("="+arg)
             decl_str = decl_str[:npos] + decl_str[npos3+1:]
         npos = decl_str.find("CV_WRAP_PHANTOM")
@@ -452,6 +509,7 @@ class CppHeaderParser(object):
         decl_str = self.batch_replace(decl_str, [("static inline", ""),
                                                  ("inline", ""),
                                                  ("explicit ", ""),
+                                                 ("[[nodiscard]] ", ""),
                                                  ("CV_EXPORTS_W", ""),
                                                  ("CV_EXPORTS", ""),
                                                  ("CV_CDECL", ""),
@@ -603,35 +661,17 @@ class CppHeaderParser(object):
                         a = a[:eqpos].strip()
                     arg_type, arg_name, modlist, argno = self.parse_arg(a, argno)
                     if self.wrap_mode:
-                        # TODO: Vectors should contain UMat, but this is not very easy to support and not very needed
-                        vector_mat = "vector_{}".format(mat)
-                        vector_mat_template = "vector<{}>".format(mat)
-
                         if arg_type == "InputArray":
-                            arg_type = mat
                             if is_arithm_op_func:
                                 modlist.append("/AOS") # Arithm Ope Source
                         elif arg_type == "InputOutputArray":
-                            arg_type = mat
                             modlist.append("/IO")
                         elif arg_type == "OutputArray":
-                            arg_type = mat
                             modlist.append("/O")
-                        elif arg_type == "InputArrayOfArrays":
-                            arg_type = vector_mat
                         elif arg_type == "InputOutputArrayOfArrays":
-                            arg_type = vector_mat
                             modlist.append("/IO")
                         elif arg_type == "OutputArrayOfArrays":
-                            arg_type = vector_mat
                             modlist.append("/O")
-                        defval = self.batch_replace(defval, [("InputArrayOfArrays", vector_mat_template),
-                                                             ("InputOutputArrayOfArrays", vector_mat_template),
-                                                             ("OutputArrayOfArrays", vector_mat_template),
-                                                             ("InputArray", mat),
-                                                             ("InputOutputArray", mat),
-                                                             ("OutputArray", mat),
-                                                             ("noArray", arg_type)]).strip()
                     if '/IO' in modlist and '/O' in modlist:
                         modlist.remove('/O')
                     if (arg_name.lower() == 'filename' or arg_name.lower() == 'filepath') and '/PATH' not in modlist:
@@ -663,10 +703,13 @@ class CppHeaderParser(object):
 
         the function will convert "A" to "cv.A" and "f" to "cv.A.f".
         """
-        if not self.block_stack:
-            return name
-        if name.startswith("cv."):
+        if (not self.block_stack) or name.startswith("cv."):
             return name
+        if name.startswith("."):
+            return name[1:]
+        if name.startswith("::"):
+            return name[2:]
+
         qualified_name = (("." in name) or ("::" in name))
         n = ""
         for b in self.block_stack:
@@ -758,7 +801,10 @@ class CppHeaderParser(object):
 
             if stmt.startswith("enum") or stmt.startswith("namespace"):
                 # NB: Drop inheritance syntax for enum
-                stmt = stmt.split(':')[0]
+                if stmt.startswith("enum"):
+                    stmt = stmt.split(':')[0].rstrip()
+                else:
+                    stmt = stmt.replace("::", ".")
                 stmt_list = stmt.rsplit(" ", 1)
                 if len(stmt_list) < 2:
                     stmt_list.append("<unnamed>")
@@ -794,8 +840,18 @@ class CppHeaderParser(object):
                 var_modlist = []
                 if "CV_PROP_RW" in stmt:
                     var_modlist.append("/RW")
-                stmt = self.batch_replace(stmt, [("CV_PROP_RW", ""), ("CV_PROP", "")]).strip()
-                var_list = stmt.split(",")
+                elif "CV_PROP_W" in stmt:
+                    var_modlist.append("/W")
+                else:
+                    var_modlist.append("/R")
+                stmt = self.batch_replace(stmt, [("CV_PROP_RW", ""), ("CV_PROP_W", ""), ("CV_PROP", "")]).strip()
+                if re.search(r"\bstatic\b\s*", stmt):
+                    var_modlist.append("/S")
+                    stmt = re.sub(r"\bstatic\b\s*", "", stmt)
+                if re.search(r"\bconst\b\s*", stmt):
+                    var_modlist.append("/C")
+                    stmt = re.sub(r"\bconst\b\s*", "", stmt)
+                var_list = self.get_var_list(stmt)
                 var_type, var_name1, modlist, argno = self.parse_arg(var_list[0], -1)
                 var_list = [var_name1] + [i.strip() for i in var_list[1:]]
 
