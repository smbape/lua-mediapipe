diff --git a/CMake/FindLibidn2.cmake b/CMake/FindLibidn2.cmake
index f8f00f0c7..534a6d1ee 100644
--- a/CMake/FindLibidn2.cmake
+++ b/CMake/FindLibidn2.cmake
@@ -43,7 +43,7 @@ set(LIBIDN2_PC_REQUIRES "libidn2")
 if(CURL_USE_PKGCONFIG AND
    NOT DEFINED LIBIDN2_INCLUDE_DIR AND
    NOT DEFINED LIBIDN2_LIBRARY)
-  find_package(PkgConfig QUIET)
+  find_package(PkgConfig QUIET GLOBAL)
   pkg_check_modules(LIBIDN2 ${LIBIDN2_PC_REQUIRES})
 endif()
 
diff --git a/CMake/FindLibrtmp.cmake b/CMake/FindLibrtmp.cmake
index 50fc9692b..d2006c681 100644
--- a/CMake/FindLibrtmp.cmake
+++ b/CMake/FindLibrtmp.cmake
@@ -92,7 +92,7 @@ else()
   mark_as_advanced(LIBRTMP_INCLUDE_DIR LIBRTMP_LIBRARY)
 
   # Necessary when linking a static librtmp
-  find_package(OpenSSL)
+  find_package(OpenSSL GLOBAL)
   if(OPENSSL_FOUND)
     list(APPEND LIBRTMP_LIBRARIES OpenSSL::SSL OpenSSL::Crypto)
   endif()
diff --git a/CMake/Macros.cmake b/CMake/Macros.cmake
index 8653f36b0..07ece9c8a 100644
--- a/CMake/Macros.cmake
+++ b/CMake/Macros.cmake
@@ -70,9 +70,9 @@ macro(curl_dependency_option _option_name _find_name _desc_name)
   set_property(CACHE ${_option_name} PROPERTY STRINGS "AUTO" "ON" "OFF")
 
   if(${_option_name} STREQUAL "AUTO")
-    find_package(${_find_name})
+    find_package(${_find_name} GLOBAL)
   elseif(${_option_name})
-    find_package(${_find_name} REQUIRED)
+    find_package(${_find_name} REQUIRED GLOBAL)
   endif()
 endmacro()
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 566863e3b..dbc81c493 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -344,7 +344,7 @@ set(LIBCURL_PC_REQUIRES_PRIVATE "")
 
 if(ENABLE_ARES)
   set(USE_ARES 1)
-  find_package(Cares REQUIRED)
+  find_package(Cares REQUIRED GLOBAL)
   list(APPEND CURL_LIBS ${CARES_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${CARES_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${CARES_PC_REQUIRES})
@@ -483,7 +483,7 @@ if(WINDOWS_STORE)
   set(CURL_DISABLE_TELNET ON)  # telnet code needs fixing to compile for UWP.
 endif()
 
-find_package(Perl)
+find_package(Perl GLOBAL)
 
 if(PERL_EXECUTABLE)
   add_custom_target(curl-ca-bundle
@@ -561,7 +561,7 @@ if(ENABLE_THREADED_RESOLVER)
   if(WIN32)
     set(USE_THREADS_WIN32 ON)
   else()
-    find_package(Threads REQUIRED)
+    find_package(Threads REQUIRED GLOBAL)
     set(USE_THREADS_POSIX ${CMAKE_USE_PTHREADS_INIT})
     set(HAVE_PTHREAD_H ${CMAKE_USE_PTHREADS_INIT})
     list(APPEND CURL_LIBS ${CMAKE_THREAD_LIBS_INIT})
@@ -735,7 +735,7 @@ if(_use_core_foundation_and_core_services)
 endif()
 
 if(CURL_USE_OPENSSL)
-  find_package(OpenSSL REQUIRED)
+  find_package(OpenSSL REQUIRED GLOBAL)
   set(_ssl_enabled ON)
   set(USE_OPENSSL ON)
 
@@ -786,7 +786,7 @@ if(CURL_USE_OPENSSL)
 endif()
 
 if(CURL_USE_MBEDTLS)
-  find_package(MbedTLS REQUIRED)
+  find_package(MbedTLS REQUIRED GLOBAL)
   set(_ssl_enabled ON)
   set(USE_MBEDTLS ON)
   list(APPEND CURL_LIBS ${MBEDTLS_LIBRARIES})
@@ -805,7 +805,7 @@ if(CURL_USE_MBEDTLS)
 endif()
 
 if(CURL_USE_BEARSSL)
-  find_package(BearSSL REQUIRED)
+  find_package(BearSSL REQUIRED GLOBAL)
   set(_ssl_enabled ON)
   set(USE_BEARSSL ON)
   list(APPEND CURL_LIBS ${BEARSSL_LIBRARIES})
@@ -820,7 +820,7 @@ if(CURL_USE_BEARSSL)
 endif()
 
 if(CURL_USE_WOLFSSL)
-  find_package(WolfSSL REQUIRED)
+  find_package(WolfSSL REQUIRED GLOBAL)
   set(_ssl_enabled ON)
   set(USE_WOLFSSL ON)
   list(APPEND CURL_LIBS ${WOLFSSL_LIBRARIES})
@@ -851,9 +851,9 @@ if(CURL_USE_GNUTLS)
     endif()
   endif()
   if(NOT GNUTLS_FOUND)
-    find_package(GnuTLS REQUIRED)
+    find_package(GnuTLS REQUIRED GLOBAL)
   endif()
-  find_package(Nettle REQUIRED)
+  find_package(Nettle REQUIRED GLOBAL)
   set(_ssl_enabled ON)
   set(USE_GNUTLS ON)
   list(APPEND CURL_LIBS ${GNUTLS_LIBRARIES} ${NETTLE_LIBRARIES})
@@ -880,7 +880,7 @@ if(CURL_USE_GNUTLS)
 endif()
 
 if(CURL_USE_RUSTLS)
-  find_package(Rustls REQUIRED)
+  find_package(Rustls REQUIRED GLOBAL)
   set(_ssl_enabled ON)
   set(USE_RUSTLS ON)
   list(APPEND CURL_LIBS ${RUSTLS_LIBRARIES})
@@ -1050,7 +1050,7 @@ endif()
 
 option(USE_NGHTTP2 "Use nghttp2 library" ON)
 if(USE_NGHTTP2)
-  find_package(NGHTTP2)
+  find_package(NGHTTP2 GLOBAL)
   if(NGHTTP2_FOUND)
     list(APPEND CURL_LIBS ${NGHTTP2_LIBRARIES})
     list(APPEND CURL_LIBDIRS ${NGHTTP2_LIBRARY_DIRS})
@@ -1069,18 +1069,18 @@ option(USE_NGTCP2 "Use ngtcp2 and nghttp3 libraries for HTTP/3 support" OFF)
 if(USE_NGTCP2)
   if(USE_OPENSSL OR USE_WOLFSSL)
     if(USE_WOLFSSL)
-      find_package(NGTCP2 REQUIRED "wolfSSL")
+      find_package(NGTCP2 REQUIRED "wolfSSL" GLOBAL)
     elseif(HAVE_BORINGSSL OR HAVE_AWSLC)
-      find_package(NGTCP2 REQUIRED "BoringSSL")
+      find_package(NGTCP2 REQUIRED "BoringSSL" GLOBAL)
     else()
-      find_package(NGTCP2 REQUIRED "quictls")
+      find_package(NGTCP2 REQUIRED "quictls" GLOBAL)
       if(NOT HAVE_LIBRESSL)
         set(_openssl "quictls")
       endif()
     endif()
     curl_openssl_check_quic()
   elseif(USE_GNUTLS)
-    find_package(NGTCP2 REQUIRED "GnuTLS")
+    find_package(NGTCP2 REQUIRED "GnuTLS" GLOBAL)
   else()
     message(FATAL_ERROR "ngtcp2 requires OpenSSL, wolfSSL or GnuTLS")
   endif()
@@ -1093,7 +1093,7 @@ if(USE_NGTCP2)
     string(APPEND CMAKE_C_FLAGS " ${NGTCP2_CFLAGS}")
   endif()
 
-  find_package(NGHTTP3 REQUIRED)
+  find_package(NGHTTP3 REQUIRED GLOBAL)
   set(USE_NGHTTP3 ON)
   list(APPEND CURL_LIBS ${NGHTTP3_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${NGHTTP3_LIBRARY_DIRS})
@@ -1110,7 +1110,7 @@ if(USE_QUICHE)
   if(USE_NGTCP2)
     message(FATAL_ERROR "Only one HTTP/3 backend can be selected")
   endif()
-  find_package(Quiche REQUIRED)
+  find_package(Quiche REQUIRED GLOBAL)
   if(NOT HAVE_BORINGSSL)
     message(FATAL_ERROR "quiche requires BoringSSL")
   endif()
@@ -1143,7 +1143,7 @@ if(USE_MSH3)
     endif()
     curl_openssl_check_quic()
   endif()
-  find_package(MSH3 REQUIRED)
+  find_package(MSH3 REQUIRED GLOBAL)
   list(APPEND CURL_LIBS ${MSH3_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${MSH3_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${MSH3_PC_REQUIRES})
@@ -1158,9 +1158,9 @@ if(USE_OPENSSL_QUIC)
   if(USE_NGTCP2 OR USE_QUICHE OR USE_MSH3)
     message(FATAL_ERROR "Only one HTTP/3 backend can be selected")
   endif()
-  find_package(OpenSSL 3.3.0 REQUIRED)
+  find_package(OpenSSL 3.3.0 REQUIRED GLOBAL)
 
-  find_package(NGHTTP3 REQUIRED)
+  find_package(NGHTTP3 REQUIRED GLOBAL)
   set(USE_NGHTTP3 ON)
   include_directories(SYSTEM ${NGHTTP3_INCLUDE_DIRS})
   list(APPEND CURL_LIBS ${NGHTTP3_LIBRARIES})
@@ -1193,7 +1193,7 @@ if(NOT CURL_DISABLE_LDAP)
     if(USE_OPENSSL)
       list(APPEND CMAKE_REQUIRED_LIBRARIES OpenSSL::SSL OpenSSL::Crypto)
     endif()
-    find_package(LDAP)
+    find_package(LDAP GLOBAL)
     if(LDAP_FOUND)
       set(HAVE_LBER_H 1)
       set(CURL_LIBS ${LDAP_LIBRARIES} ${CURL_LIBS})
@@ -1271,7 +1271,7 @@ option(USE_LIBIDN2 "Use libidn2 for IDN support" ON)
 set(HAVE_IDN2_H OFF)
 set(HAVE_LIBIDN2 OFF)
 if(USE_LIBIDN2 AND NOT USE_APPLE_IDN AND NOT USE_WIN32_IDN)
-  find_package(Libidn2)
+  find_package(Libidn2 GLOBAL)
   if(LIBIDN2_FOUND)
     set(CURL_LIBS ${LIBIDN2_LIBRARIES} ${CURL_LIBS})
     list(APPEND CURL_LIBDIRS ${LIBIDN2_LIBRARY_DIRS})
@@ -1292,7 +1292,7 @@ mark_as_advanced(CURL_USE_LIBPSL)
 set(USE_LIBPSL OFF)
 
 if(CURL_USE_LIBPSL)
-  find_package(Libpsl REQUIRED)
+  find_package(Libpsl REQUIRED GLOBAL)
   list(APPEND CURL_LIBS ${LIBPSL_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${LIBPSL_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBPSL_PC_REQUIRES})
@@ -1310,7 +1310,7 @@ mark_as_advanced(CURL_USE_LIBSSH2)
 set(USE_LIBSSH2 OFF)
 
 if(CURL_USE_LIBSSH2)
-  find_package(Libssh2)
+  find_package(Libssh2 GLOBAL)
   if(LIBSSH2_FOUND)
     set(CURL_LIBS ${LIBSSH2_LIBRARIES} ${CURL_LIBS})  # keep it before TLS-crypto, compression
     list(APPEND CURL_LIBDIRS ${LIBSSH2_LIBRARY_DIRS})
@@ -1328,7 +1328,7 @@ endif()
 option(CURL_USE_LIBSSH "Use libssh" OFF)
 mark_as_advanced(CURL_USE_LIBSSH)
 if(NOT USE_LIBSSH2 AND CURL_USE_LIBSSH)
-  find_package(Libssh REQUIRED)
+  find_package(Libssh REQUIRED GLOBAL)
   set(CURL_LIBS ${LIBSSH_LIBRARIES} ${CURL_LIBS})  # keep it before TLS-crypto, compression
   list(APPEND CURL_LIBDIRS ${LIBSSH_LIBRARY_DIRS})
   set(LIBCURL_PC_REQUIRES_PRIVATE ${LIBSSH_PC_REQUIRES} ${LIBCURL_PC_REQUIRES_PRIVATE})
@@ -1346,7 +1346,7 @@ mark_as_advanced(CURL_USE_WOLFSSH)
 set(USE_WOLFSSH OFF)
 if(NOT USE_LIBSSH2 AND NOT USE_LIBSSH AND CURL_USE_WOLFSSH)
   if(USE_WOLFSSL)
-    find_package(WolfSSH)
+    find_package(WolfSSH GLOBAL)
     if(WOLFSSH_FOUND)
       set(CURL_LIBS ${WOLFSSH_LIBRARIES} ${CURL_LIBS})  # keep it before TLS-crypto, compression
       include_directories(SYSTEM ${WOLFSSH_INCLUDE_DIRS})
@@ -1360,7 +1360,7 @@ endif()
 option(CURL_USE_GSASL "Use libgsasl" OFF)
 mark_as_advanced(CURL_USE_GSASL)
 if(CURL_USE_GSASL)
-  find_package(Libgsasl REQUIRED)
+  find_package(Libgsasl REQUIRED GLOBAL)
   list(APPEND CURL_LIBS ${LIBGSASL_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${LIBGSASL_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBGSASL_PC_REQUIRES})
@@ -1376,7 +1376,7 @@ option(CURL_USE_GSSAPI "Use GSSAPI implementation" OFF)
 mark_as_advanced(CURL_USE_GSSAPI)
 
 if(CURL_USE_GSSAPI)
-  find_package(GSS)
+  find_package(GSS GLOBAL)
 
   set(HAVE_GSSAPI ${GSS_FOUND})
   if(GSS_FOUND)
@@ -1435,7 +1435,7 @@ if(CURL_USE_LIBUV)
   if(NOT ENABLE_DEBUG)
     message(FATAL_ERROR "Using libuv without debug support enabled is useless")
   endif()
-  find_package(Libuv REQUIRED)
+  find_package(Libuv REQUIRED GLOBAL)
   list(APPEND CURL_LIBS ${LIBUV_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${LIBUV_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBUV_PC_REQUIRES})
@@ -1450,7 +1450,7 @@ endif()
 
 option(USE_LIBRTMP "Enable librtmp from rtmpdump" OFF)
 if(USE_LIBRTMP)
-  find_package(Librtmp REQUIRED)
+  find_package(Librtmp REQUIRED GLOBAL)
   list(APPEND CURL_LIBS ${LIBRTMP_LIBRARIES})
   list(APPEND CURL_LIBDIRS ${LIBRTMP_LIBRARY_DIRS})
   list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBRTMP_PC_REQUIRES})
